<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Linux之进程管理入门]]></title>
      <url>http:/2016/05/13/process/</url>
      <content type="text"><![CDATA[概述Linux进程管理入门。。。 本章关键字 进程，程序，进程管理，作业控制，守护进程，周期性任务。 本章涉及到的命令ps，pgrep，pidof，nohup，pstree，chkconfig，service，systemctl，crontab，at 本章目地了解Centos操作系统中的进程，熟悉常用的进程和作业管理，熟悉守护进程和周期性任务的控制管理。 各小节联系第一部分：了解Linux中进程，程序的基本概念；第二部分：对进程和作业进行控制管理；第三部分：对特殊的进程：守护进程进行管理；第四部分：对周期性任务进行控制管理(熟悉，了解进程概念—&gt;管理进程—&gt;特殊的进程进行管理(守护进程，周期性任务)) 进程管理进程概述进程概念进程（process），是计算机中已运行程序的实体，是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位。 程序本身只是指令、数据及其组织形式的描述，进程才是程序（那些指令和数据）的真正运行实例 。若干进程有可能与同一个程序相关系，且每个进程皆可以同步（循序）或异步（平行）的方式独立运行。现代计算机系统可在同一段时间内以进程的形式将多个程序加载到内存中，并借由时间共享（或称时分复用），以在一个处理器上表现出同时（平行性）运行的感觉。 进程的概念主要有两点： 进程是一个实体。每一个进程都有它自己的地址空间，一般情况下，包括文本区域（text region）、数据区域（data region）和堆栈（stack region）。文本区域存储处理器执行的代码；数据区域存储变量和进程执行期间使用的动态分配的内存；堆栈区域存储着活动过程调用的指令和本地变量。 进程是一个“执行中的程序”。程序是一个没有生命的实体，只有处理器赋予程序生命时（操作系统执行之），它才能成为一个活动的实体，我们称其为进程。 进程和程序 程序是指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念。而进程是程序在处理机上的一次执行过程，它是一个动态的概念。 程序可以作为一种软件资料长期存在，而进程是有一定生命期的。程序是永久的，进程是暂时的。 进程更能真实地描述并发，而程序不能； 进程是由进程控制块、程序段、数据段三部分组成; 进程具有创建其他进程的功能，而程序没有。 同一程序同时运行于若干个数据集合上，它将属于若干个不同的进程，也就是说同一程序可以对应多个进程。 在传统的操作系统中，程序并不能独立运行，作为资源分配和独立运行的基本单元都是进程。 作业和任务用户通过操作系统用户接口（Shell或X环境）提交给计算机进行加工处理的程序。如用户发出一个打印命令，就产生一个打印作业/任务。 可以理解为一项任务。 Linux中的进程 每个用户均可同时运行多个程序。为了区分每一个运行的程序，Linux 给每个进程都做了标识，称为进程号（process ID），每个进程的进程号是唯一的。注意： 系统启动后的第一个进程是init，它的PID是1;init是唯一一个由系统内核直接运行的进程；新进程可以用系统调用fork来产生；除了init之外，每个进程都有父进程（PPID标识）。 Linux 给每个进程都打上了运行者的标志，用户可以控制自己的进程：给自己的进程分配不同的优先级，也可以随时终止自己的进程。 每个进程还有四个与用户和组相关的识别号 实际用户识别号 （real user ID，RUID）实际组识别号 （real group ID，RGID）有效用户识别号 （effect user ID，EUID）有效组识别号 （effect group ID，EGID） RUID和RGID的作用： 识别正在运行此进程的用户和组，一个进程的RUID和RGID就是运行此进程的UID和GID。 EUID和EGID的作用： 确定一个进程对其访问的文件的权限。 除了产生进程的程序被设置SUID和SGID权限位之外，一般EUID、EGID和RUID、RGID相同。 若程序被设置了SUID或SGID权限位，则此进程相应的EUID和EGID，将和运行此进程的文件的所属用户的UID或所属组的GID相同。 进程信号 进程信号是在软件层次上对中断机制的一种模拟，在原理上， 一个进程收到一个信号与处理器收到一个中断请求可以说是一样的； 进程信号是最基本的进程间通讯方式，可以在进程之间直接发送，而不需要用户界面，可以在Shell中通过kill命令发送给进程； Linux对每种进程信号都规定了默认关联动作; 查看可用的进程信号：kill -l 常见的进程信号 SIGTERM | TERM （15） —— 正常终止 (默认) SIGKILL | KILL （9） —— 立即终止 SIGHUP | HUP （1） —— 重读配置文件 给进程发送信号 按PID：kill [信号] PID … 按名称：killall [信号] COMM … 按模式：pkill [-信号] 模式 发送信号可以使用名称或数字号码 进程类型1.交互进程 由一个Shell启动的进程 ，它既可以在前台运行，也可以在后台运行。2.批处理进程 不与特定的终端相关联 ，它是需要提交到等待队列种顺序执行的进程。3.守护进程（Daemon）在Linux在启动时初始化，运行于后台的进程（ 类似于Windows中的服务 ） 进程启动方式1.手工方式：使用操作系统提供的用户接口 前台进程：指一个程序控制着标准输入/输出，在程序运行时，shell 被暂时挂起，直到该程序运行结束后，才退回到 shell。在这个过程中，用户不能再执行其它程序。例如：ls -l; 后台进程：在命令最后空格加上“&amp;”，为了避免某些进程长期霸占终端，将其置于后台运行,用户不必等待程序运行结束就可以执行其它程序。例如：ls -R / &gt;list &amp; 注意：在一个终端里只能同时存在一个前台任务，但可以有多个后台任务。 2.调度方式：按照预先指定的时间执行at，batch，cron Linux操作系统进程启动顺序 进程管理和作业控制查看进程1.ps命令：查看进程状态信息2.命令格式：ps [选项]不带任何选项的ps命令，会显示当前用户所在终端中的所有进程输出项包括：识别号(PID)、终端(TTY)、运行时间(TIME)、产生该进程所运行的命令(CMD)3.ps命令的常用选项4.ps 常见的输出标记5.ps命令的进程状态列6.常用举例：指定输出列：ps axo stat,euid,ruid,tty,tpgid,sess,pgrp,ppid,pid,pcpu,comm对指定列排序：ps aux --sort -pcpu搜索进程(使用ps和|grep)：ps -ef | grep sshps aux | grep ssh查找符合条件的PID：pgrep sshpidof ssh 杀死进程1.杀死进程的原因 该进程占用了过多的CPU时间 该进程锁住了一个终端，使其他前台进程无法运行 运行时间过长，但没有预期效果或无法正常退出 产生了过多到屏幕或磁盘文件的输出 2.杀死进程的命令( 实质是向进程传递进程信号 ) 通过pid杀死进程 kill 1234 OR kill -9 1234 通过名称杀死进程killall myprog OR killall -9 myprog 注：kill –9 很霸道，它在杀死一个进程的同时，将杀死其所有子进程，使用时要谨慎。如错杀 login 进程或 shell 进程等。 作业控制作业控制是指控制当前正在运行的进程的行为，也被称为进程控制。1.作业控制常用快捷键/命令（ 实质也是在发送进程信号 ） 将命令放到后台运行： cmd &amp; 终止一个前台运行的进程（正常终止）： &lt;Ctrl+d&gt; 终止一个前台运行的进程（强行终止）：&lt;Ctrl+c&gt; 挂起一个正在前台运行的进程(发送信号17)：&lt;Ctrl+z&gt; 显示后台作业和被挂起的进程：jobs 在后台恢复一个被挂起的进程：bg 在前台恢复一个被挂起的进程：fg 2.管理后台作业或暂停的作业 列举作业号码和名称：jobs 注意：+表示默认作业，-表示第二默认作业，第三列表示作业状态，第四列表示作业名 在后台恢复运行：bg [%作业号码] 在前台恢复运行：fg [%作业号码] 注意：bg等同于bg %+，fg等同于fg %+ 发送信号：kill -[信号] [％作业号码]杀死默认作业： kill %+ 用户注销后继续运行进程 通常当用户注销后，所有属于该用户的进程将全部被终止 ，如果希望程序在退出系统后仍然能够继续运行，可以使用nohup来启动进程：命令格式：nohup 命令 [选项] [参数] [输出文件] &amp;例如：nohup hexo s &amp; 注意： 若程序有结果输出，输出结果将会被保存到当前目录下的一个文件名为 nohup.out 的文件中， 若用户在当前目录没有写的权限，则结果将会被保存到用户主目录下的 nohup.out 文件中。 守护进程守护进程概念守护进程始终在后台运行并响应合法请求的程序称为守护（Daemon）进程，类似于windows中的”服务”。 守护进程不是由用户启动运行的，也不与终端关联。 一个实际运行中的系统一般会有多个守护进程在运行，且各个系统中运行的守护进程都不尽相同。 除非程序异常中止或者人为终止，否则它们将一直运行下去直至系统关闭。 守护进程的分类 系统守护进程 计划性任务 daemon：如 atd、crond 系统日志 daemon：如 syslogd 网络参数设置 daemon：如 network 网络守护进程(超级守护进程） 各种网络协议侦听 daemon：如：sshd、httpd、sendmail、vsftpd 网络超级服务器（Supper Server）：如：xinetd 或 inetd 网络守护进程的工作原理 网络程序之间的连接是通过端口之间的连接而实现的 。在C/S模型中，服务器监听（Listen）在一个特定的端口上等待客户的连接。连接成功之后客户机与服务器通过端口进行数据通讯。 守护进程的工作就是打开一个端口，并且等待并监听（Listen）进入的连接 。如果客户提请了一个连接， 守护进程就创建（fork）子进程来响应此连接，而父进程继续监听更多的服务请求 。因此，每个守护进程都可以处理多个客户服务请求。 超级服务器的引入 超级服务器为众多服务创建套接字，并使用Socket系统调用同时监听多个端口 ，最广泛使用的就是xinetd（Extended Internet Daemon） 对于系统所要提供的每一种网络服务，都必须运行一个监听某个端口连接发生的守护程序，这通常意味着系统资源的浪费。 为了避免系统资源浪费引入了“超级服务器” 超级服务器启动后同时监听它所管理的服务的所有端口 当有客户提出服务请求时 超级服务器会判断这是对哪一个服务的请求，然后再开启与此服务相应的守护进程 由超级服务器产生的某服务的进程处理客户的请求，当处理结束便终止此服务进程 超级服务器本身继续监听其他服务请求 守护进程的启动方式 独立启动 独立运行的守护进程由init脚本负责管理 独立运行的守护进程的脚本存放在 /etc/rc.d/init.d/ 目录下 所有的系统服务都是独立运行的。如：crond、syslogd等 一些常用的网络守护进程是独立运行的。如：httpd等 由超级守护进程运行的守护进程 由网络超级服务器（xinetd）运行的守护进程 由xinetd管理的守护进程的配置文件存在/etc/xinetd.d/目录下 默认的xinetd的主配置文件是/etc/xinetd.conf 一些不常用的网络守护进程是由xinetd启动的，如：telnet、 tftp等 xinetd本身是独立运行的守护进程 查看守护进程列表:pstree xinetd介绍xinetd是新一代的网络守护进程服务程序，提供类似于早期的inetd+tcp_wrapper的功能，与之相比xinetd更加强大和安全。 功能 支持tcp、ucp、RPC协议服务 基于时间段的访问控制 功能完备的log功能，能限制log文件大小 能有效的防止DoS攻击（Denial of Services） 能限制同时运行的同一类型的服务器数目 能限制启动的所有服务器的数目 整合了TCP Wrappers的 libwrap.so库 配置 xinetd的配置文件 /etc/xinetd.conf/etc/xinetd.d/ xinetd的常见配置参数 disable （xinetd是否监控此服务 ）server （指定由xinetd监控的服务器路径 ）server_args （指定由xinetd监控的服务器的运行参数）only_from （只允许指定的主机访问 ）no_access （指定不能访问的主机）per_source （每个客户机的最大连接数 ）instances （服务器总共支持的最高连接数 ） 配置举例：/etc/xinetd.d/tftpservice tftp { disable = no socket_type = dgram protocol = udp wait = yes user = root server = /usr/sbin/in.tftpd server_args = -s /tftpboot cps = 100 2 flags = IPv4 instances = 20 per_source = 1 access_times = 7:00-12:00 13:30-19:00 only_from = 192.168.1.0/24 } TCP Wrappers概述全称Transmission Control Protocol Wrappers，是一种应用层的网络访问控制程序。它是由 Wietse Venema 开发的一个免费软件。它使用访问控制列表 (ACL) 实现主机访问控制，其中 /etc/hosts.allow 是一个许可表， /etc/hosts.deny 是一个拒绝表 TCP Wrappers实现访问控制 读取/etc/hosts.allow文件，如果明确允许访问，则提供访问且不再检查/etc/hosts.deny 读取/etc/hosts.deny文件，如果明确拒绝访问，则指定计算机将被拒绝访问。 如果两个文件中都没有访问者的计算机名称或IP地址，则自动提供访问权。 如果不存在这两个文件或文件内容为空，则 TCP_Wrappers的访问控制功能被禁用。 TCP Wrappers与防火墙 通常做法是在 Linux 操作系统上安装 Netfilter/iptables 防火墙来处理网络连接。 虽然防火墙有非常广泛的用途，但他却不是万能的。 例如它无法处理类似的向连接发起者发送一些文本这样的任务。TCP Wrappers 能够完成它以及更多的其他事情。 TCP Wrappers 能提供的一些额外的安全功能，但不应被视为好的防火墙的替代品。 TCP Wrappers 应结合防火墙或其他安全加强设施一起使用，为系统多提供一层安全防护。 TCP Wrappers的配置文件语法TCP Wrappers的配置文件是/etc/hosts.allow 和 /etc/hosts.deny ，在配置文件中，“#”开始的行为注释；“\” 为续行符特殊配置项： 宏定义 主机名宏定义 LOCAL ：本地主机 KNOWN：可解析域名的主机 UNKNOWN：不可解析域名的主机 PARANOID ：IP与其主机名不符的客户 主机和服务宏定义 ALL EXCEPT 可嵌套 示例 sshd: centos.example.com 192.168.0.254 sshd: .example.com sshd: .cracker.org EXCEPT trusted.cracker.org sshd: 123.113.103. 123.113.13.207 LOCAL sshd: 123.113.103. EXCEPT 123.113.103.207 sshd: 192.168.0.0/255.255.254.0 sshd: 192.168.0.0/23 sshd: ALL sshd: ALL EXCEPT 192.168.1. sshd: ALL EXCEPT 192.168.1. PARANOID sshd: /etc/acl/mylists.hosts 注意：任何修改都立即生效，不需要重新启动服务 守护进程管理工具chkconfig(越来越弱了) chkconfig命令主要用来更新（启动或停止）和查询系统服务的运行级信息。谨记chkconfig不是立即自动禁止或激活一个服务， 它只是简单的通过操作/etc/rc[0-6].d目录下的符号连接来实现对各种服务的管理。 功能 添加指定的新服务 清除指定的服务 显示由chkconfig管理的服务 改变服务的运行级别 检查服务的启动状态 命令格式 chkconfig –list [server-name] chkconfig –add server-name chkconfig –del server-name chkconfig [–level levels] server-name 举例 查看指定的服务在所有运行级别的运行状态 chkconfig --list sendmail 显示由chkconfig管理的所有服务chkconfig --list 添加一个由chkconfig管理的服务chkconfig --add httpd 更改指定服务在指定运行级别的运行状态chkconfig --level 35 httpd on service 在系统运行期间改变守护程序的运行状态 service的命令格式 service –status-all service server-name status service server-name start|stop|restart 举例 查看系统中的所有守护进程的状态service --status-all 查看某个具体的守护进程的状态service nginx status 启动或停止某个守护进程 独立运行service httpd start|stop|restart 由xinetd运行chkconfig tftp on|offservice xinetd restart systemctlsystemctl是RHEL 7 的服务管理工具中主要的工具， 它融合之前service和chkconfig的功能于一体 。可以使用它永久性或只在当前会话中启用/禁用服务。 功能 可以列出正在运行的服务状态systemctlsystemd-cgls以树形列出正在运行的进程，它可以递归显示控制组内容systemd-cgls 启动/关闭、启用/禁用服务 启动一个服务：systemctl start postfix.service关闭一个服务：systemctl stop postfix.service重启一个服务：systemctl restart postfix.service显示一个服务的状态： systemctl status nginx在开机时启用一个服务：systemctl enable postfix.service在开机时禁用一个服务：systemctl disable postfix.service查看服务是否开机启动：systemctl is-enabled postfix.service查看已启动的服务列表：systemctl list-unit-files|grep enabled查看启动失败的服务列表：systemctl --failed 注意： 启用服务就是在当前“runlevel”的配置文件目录 /etc/systemd/system/multi-user.target.wants/ 里，建立 /usr/lib/systemd/system 里面对应服务配置文件的软链接； 禁用服务就是删除此软链接，添加服务就是添加软连接 周期性任务cron守护进程周期性任务在某个特定时间执行某些命令的行为称为周期性任务； crond守护进程crond守护进程责负责监控周期性任务的执行；它的执行参数保存在/etc/sysconfig/crond中；1. 控制普通用户的使用 若/etc/cron.allow存在，仅列在其中的用户允许使用 若/etc/cron.allow 不存在，检查/etc/cron.deny，没有列于其中的所有用户允许使用 若两个文件均不存在，仅允许root用户使用 空的/etc/cron.deny文件，表示允许所有用户使用（默认值） 2.crond的运行机制 crond守护进程搜索crontab文件并载入内存（ crontab文件即 /etc/crontab 文件和 /var/spool/cron/目录下以用户名命名 的文件） crond守护进程启动以后，它将首先检查是否有用户设置了crontab文件，如果没有就转入休眠状态，释放系统资源 crond守护进程每分钟醒来一次，查看crontab文件决定当前是否有需要执行的命令。 3.crontab命令 作用：用于生成cron进程所需要的crontab文件 命令格式 crontab [-u user] file crontab [-u user] {-l|-r|-e}ronta-l 在标准输出上显示当前的crontab-r 删除当前的crontab-e 使用编辑器编辑当前的cb文件。当结束编 辑离开时，编辑后的文件将自动安装。 任何被允许的用户都可以使用crontab安排任务 crontab文件的格式 每一行由5个时间字段及命令组成minute hour day-of-month month-of-year day-of-week commands 五个时间字段 minute： 一小时中的哪一分钟 [0～59] hour： 一天中的哪个小时 [0～23] day-of-month： 一月中的哪一天 [1～31] month-of-year： 一年中的哪一月 [1～12] day-of-week： 一周中的哪一天 [0～6] crontab文件的书写注意事项 这些项都不能为空，必须填入 如果用户不需要指定其中的几项时间，那么可以使用统配符- 表示任何时间 每个时间字段都可以指定多个值，它们之间用”,”间隔，如：1,3,5 每个时间字段都可以指定范围，它们之间用“-”间隔 ，如：12-20 每个时间字段都可以使用- /n表示每隔n，如：- /2命令应该给出绝对路，或设置PATH环境变量 用户必须具有运行所对应的命令或程序的权限 系统的 cron 任务 crond 守护进程还将搜索系统的cron任务配置文件 /etc/crontab。 使用/etc/crontab 文件为系统管理员安排 cron 任务提供了方便。 以下目录中存放了/etc/crontab 文件运行时执行的文件 /etc/cron.hourly/ ：存放每小时要执行的任务文件 /etc/cron.daily/ ：存放每天要执行的任务文件 /etc/cron.weekly/ ：存放每周要执行的任务文件 /etc/cron.monthly/ ：存放每月要执行的任务文件 管理员在 /etc/cron.- ly目录下建立脚本文件来安排 cron任务，且在脚本中只需写要安排执行的命令即可 /etc/cron.d/ 目录包含额外的系统 crontab 文件 /etc/crontab 文件 SHELL=/bin/bash PATH=/sbin:/bin:/usr/sbin:/usr/bin MAILTO=root HOME=/ 01 - - - - root run-parts /etc/cron.hourly 02 4 - - - root run-parts /etc/cron.daily 22 4 - - 0 root run-parts /etc/cron.weekly 42 4 1 - - root run-parts /etc/cron.monthly 其他安排周期性任务守护进程和命令1.anacron守护进程 anacron（anachronistic cron） 是 crond 的一个连续时间版本，它运行计算机关机时 crond 没有运行的任务； anacron 在 /var/spool/anacron 中保留时间戳文件，记录作业运行的时间； 当 anacron 运行时，它检查自作业上一次运行以来是否已经经过了所需的天数，如果需要，就运行作业； anacron 的任务表存储在 /etc/anacrontab 文件中。 anacron 的执行过程 对于每项任务，anacron 先判定该任务是否已在配置文件的周期字段中指定的期间内被执行了。如果它在给定周期内还没有被执行，anacron 会等待延迟字段中指定的分钟数，然后再次尝试执行命令字段中指定的命令； 当任务完成后，anacron 会将此日期记录在 /var/spool/anacron 目录的时间戳（Timestamp）文件中，默认的时间戳文件有三个：cron.daily，cron.monthly 和 cron.weekly。 2.atd守护进程和at命令atd守护进程负责监控一次性任务的执行，atd守护进程的执行参数保存在/etc/sysconfig/atd配置文件中； 控制普通用户的使用 若/etc/at.allow存在，仅列在其中的用户允许使用 若/etc/at.allow 不存在，检查/etc/at.deny，没有列于其中的所有用户允许使用 若两个文件均不存在，仅允许root用户使用 空的/etc/at.deny文件，表示允许所有用户使用（默认值） at命令的功能和格式 功能：安排一个或多个命令在指定的时间运行 一次。 at 命令格式及参数 at [-q 队列] [-f 文件名] 时间 at -d at -l at -c]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Linux之网络知识入门]]></title>
      <url>http:/2016/05/12/Internet/</url>
      <content type="text"><![CDATA[概述Linux网路知识入门。。。 本章关键字Linux网络参数，接口设备，设备别名，网络参数配置(临时性(ifconfig,route,hostname,sysctl -w)，永久性(网络接口配置文件))，网络检测工具(ping,netstat,lsof,dig,traceroute)，网络客户工具(lftp,wget,w3m,rsync)，SSH(体系结构，安全验证(基于主机/用户)，SSH免密认证过程)，OpenSSH(ssh,scp,sftp，用户密钥相关文件，密钥的生成，散播，ssh-agent,ssh-add,keychain)，私钥，公钥 本章涉及到的命令ifconfig，route，hostname，sysctl -w，lftp，wget，w3m，rsync，ping，netstat，lsof，traceroute，dig，ssh，scp，sftp，ssh-keyscan，ssh-keygen，ssh-add 本章目地了解Linux网络的配置和使用，对Linux环境下网络的使用有个大概了解； 各小节联系本章主要分为三个部分，网络基础，网络配置，网络工具(测试工具，客户工具和OpenSSH)；第一部分介绍了Linux中相关的网络背景和网络知识；第二部分讲述了Linux操作系统中对TCP/IP网络参数的配置；第三部分讲述了在Linux操作系统中网络的检测和使用以及远程登录Linux的方法。(熟悉，了解—&gt;配置—&gt;检测，使用) 网络基础TCP/IP基本知识 Linux支持各种协议类型的网络(TCP/IP、NetBIOS/NetBEUI、IPX/SPX、AppleTake等),在网络底层也支持Ethernet、Token Ring、ATM、PPP（PPPoE）、FDDI、Frame Relay等网络协议，这些网络协议是Linux内核提供的功能，具体的支持情况由内核编译参数决定；RHEL/CentOS的Linux内核默认支持上述的网络协议； 在TCP/IP网络上，每台设备在存取网络资源之前都需要进行网络配置(IP地址，子网掩码，默认网关，DNS等)，配置方法分为静态配置和动态配置； 网络接口设备与别名常见的接口类型接口类型 接口名称 说明 以太网接口 ethX 是最常用的网络接口 令牌环接口 trX 只出现在少数纯IBM环境的网络中 光纤分布式数据接口 fddiX FDDI接口设备昂贵，通常用于核心网或高速网络中 点对点协议接口 pppX 用于Modem/ADSL拨号网络或基于PPTP协议的VPN等 本地回环接口 lo 用于支持UNIX Domain Socket技术的进程相互通信（IPC） 注：X是从0开始的整数。如：eth0代表第一块以太网卡，eth1代表第二块以太网卡等。 Linux支持众多网络类型的接口，网络接口设备的驱动程序是inux内核的组成部分，Centos默认是采用内核模块的方式再系统引导时驱动网络接口的，系统检测到网卡之后，我们可以到内核模块配置文件中查看系统加载的网卡驱动模块； 设备别名使用别名（aliases），单个设备可具备多个地址 别名被标识为（eth0:1，eth0:2）等等 别名被当作单独的接口对待 基于一块物理网卡的多个别名（包括物理网卡自身）只能有一个接口使用DHCP动态分配网络参数 网络接口的启用与停用 使用 ifup ethX 命令来启用指定的接口 使用 ifdown ethX 命令来禁用指定的接口 网络配置临时性配置(配置后立即生效)可以使用ifconfig开查看并临时配置网络接口配置： ifconfig &lt;网络接口&gt; &lt;IP地址&gt; [Mask &lt;子网掩码&gt;] [Broadcast &lt;广播地址&gt;] 例如： # ifconfig eth0 10.0.0.10 Mask 255.255.255.0 Broadcast 10.0.0.255 # ifconfig eth0 192.168.0.10 # ifconfig eth0:0 192.168.1.10 注:当IP地址使用标准A、B、C类地址时，广播地址和子网掩码可以省略查看： 列出已经启动的网络接口： # ifconfig 列出全部已经配置的接口(包含已启动和未启动的)： # ifconfig -a 配置别名设备，并绑定多个IP： # ifconfig eth0:1 192.168.1,5 # ifconfig eth0:2 192.168.1.7 route查看和配置路由查看内核路由： # route 路由的种类： 到主机的路由(Flags字段为H) 到网络的路由(Flags字段为N) 默认网关(Flags字段为G) 临时地设置内核路由表： route add|del [-net|-host] &lt;target [netmask Netmask]&gt; [gw Gateway] [[dev] Interface] add或del：表示添加或删除路由 -net或-host：表示添加到主机或网络的路由 target：指定目标主机或网络地址，若目标为网络地址时，需使用 netmask 指定子网掩码 gw：用于指定网关的IP地址 dev：用于指定路由的网络接口（dev关键字可省略） 添加到主机的路由 # route add -host 10.20.30.148 gw 10.20.30.40 添加到网络的路由 # route add -net 10.20.30.40 netmask 255.255.255.248 eth0 添加默认网关路由 # route add default gw 192.168.1.1 删除到主机的路由 # route del -host 192.168.1.2 dev eth0:0 hostname命令可以临时地修改主机名格式：hostname &lt;主机名&gt; 例如：# hostname centos.al.co sysctl命令可以临时地开启内核的包转发sysctl -w net.ipv4.ip_forward=1 永久性配置(配置后重启设备生效)配置文件 说明 /etc/sysconfig/network 系统网络配置文件，包含了主机最基本的网络信息用于系统启动 /etc/sysconfig/network-scripts/ifcfg-ethX 以太网接口配置文件 /etc/sysconfig/network-scripts/route-ethX 以太网接口的静态路由配置文件 /etc/hosts 完成主机名映射为IP地址的静态解析功能 /etc/resolv.conf 配置域名服务客户端的配置文件，用于指定域名服务器的位置 /etc/host.conf 配置域名服务客户端的控制文件 网络设备的配置(/etc/sysconfig/network-scripts/ifcfg-ethX)选项 说明 Type 指定网络接口类型 DEVICE 指定设备名 HWADDR 指定网卡的MAC地址 BOOTPROTO 指定获取网络参数的方式 ONBOOT 指定是否在启动时启用设备 IPADDR 指定静态IP地址 NETMASK 指定子网掩码 BROADCAST 指定广播地址 GATEWAY 指定设备的网关 例如：静态配置： Type=Ethernet DEVICE=eth0 HWADDR=00:02:8A:A6:30:45 BOOTPROTO=static ONBOOT=yes IPADDR=192.168.0.123 NETMASK=255.255.255.0 BROADCAST=192.168.0.255 GATEWAY=192.168.0.1 动态配置： Type=Ethernet DEVICE=eth0 HWADDR=00:02:8A:A6:30:45 BOOTPROTO=dhcp ONBOOT=yes 系统网络配置文件(/etc/sysconfig/network)例如： NETWORKING=yes HOSTNAME=centos1.ls-al.loc GATEWAY=192.168.1.254 网络接口的静态路由配置文件(/etc/sysconfig/network-scripts/route-ethX)每个网络接口均可有其静态路由配置文件 例如：/etc/sysconfig/network-scripts/route-eth0配置文件内加入： 192.168.2.0/24 via 172.16.10.88 本地域名解析数据库(/etc/hosts)例如： 127.0.0.1 localhost.localdomain localhost ::1 localhost6.localdomain6 localhost6 192.168.1.200 centos1.ls-al.loc centos1 192.168.0.200 soho.mylabs.me soho 配置远程域名解析器(/etc/resolv.conf)例如： nameserver 192.168.1.1 nameverver 208.67.222.222 nameverver 208.67.220.220 domain sinolido.org # 指定本机所在的域 search sinolido.org # 指定默认搜索域 配置域名解析顺序(/etc/host.conf)例如：首先查找 /etc/hosts 文件进行域名解析，然后使用/etc/resolv.conf文件中指定的域名服务器进行域名解析，/etc/host.conf中配置为： order hosts,bind 设置包转发(/etc/sysctl.conf)net.ipv4.ip_forward = 1 网络工具网络测试工具命令工具 功能说明 ifconfig 检测网络接口配置 route 检测路由配置 ping 检测网络连通性 netstat 查看网络状态 lsof 查看指定IP 和/或 端口的进程的当前运行情况 host/dig/nslookup 检测DNS解析 traceroute 检测到目的主机所经过的路由器 tcpdump 显示本机网络流量的状态 ping：测试网络的连通性# ping www.baidu.com traceroute：显示数据包到达目的主机所经过的路由# traceroute www.baidu.com netstat：查看网络端口# netstate -i //显示网络接口状态信息 # netstate -an //显示监控中的和正在使用的Socket的程序信息 # netstate -nr //显示内核路由表信息 # netstate -lnpt //显示TCP传输协议的连接状态信息 # netstate -lnpu //显示UDP传输协议的连接状态信息 lsof：查看在指定IP 和/或 端口上打开的进程查看指定端口运行的程序 # lsof -i :22 dig：检测DNS解析根据/etc/resolv.conf 中的DNS服务器配置查询某域名对应的IP地址/IP对应的域名 # dig wwwbaidu.com 查询 192.168.0.252 所对应的域名 # dig -x 192.168.0.252 网络客户工具命令 功能 telnet 远程登录 ftp/lftp/ncftp FTP工具 smbclient 存取 SMB/CIFS 共享资源（类似于ftp） wget 下载文件、镜像 WEB站点 rsync 远程文件同步 links/w3m/lynx 浏览器 mutt/mail 邮件客户 ssh/scp/sftp 基于安全协议的 远程登录/远程复制/远程FTP lftp：功能强大的字符界面文件传输工具lftp支持传统ftp的所有子命令；lftp还支持如下子命令（常用的）： help &lt;cmd&gt;：显示指定子命令的帮助信息 get/put/mget/mput：比传统ftp提供更多的选项 pget：多线程下载 reget/reput：续传，等效于 get/put 的 –c 选项 mirror：镜像站点目录 open/close：开始/关闭一个FTP连接 set：设置lftp的环境参数 wget：基于控制台的HTTP/FTP下载工具wget [option] [&lt;URL-list&gt;] 基本选项： 选项 说明 选项 说明 -h 显示命令帮助 -o logfile 将执行过程写入日志文件logfile -b 后台执行 -a logfile 将执行过程追加到日志文件logfile -v 显示冗余输出 -i urlfile 从urlfile文件读取要下载的文件列表 -q 不显示执行输出 -O outputfile 将下载的文件改名为outputfile -d 显示调试信息 -P PREFIX 将下载的文件存入PREFIX/目录 常用下载选项： 选项 说明 选项 说明 -t NUM 重试次数为NUM --limit-rate=RATE 限制下载速度 -c 继续未完成的任务 -m 镜像站点目录 -N 开启时间戳比较，仅下载比本地新的文件 -k 将下载文件中的链接转换为本地的相对链接 -r 递归下载 -K 转换链接前先备份文件 -l NUM 指定下载深度为NUM --user=USER 指定用户名 -nc 不下载已存在的文件 --password=PASS 指定用户的口令 -nd 不在本地创建目录结构 -L 仅下载本站相关联的链接 -np 不遍历父目录 -H 可下载外部站点相关文件 -p 下载HTML页面所包含的所有元素文件 --delete-after 下载后删除本地文件，常用于生成Squid缓存 常用筛选选项： 选项 说明 -A, --accept=LIST 使用逗号间隔的列表指出允许下载的文件扩展名 -R, --reject=LIST 使用逗号间隔的列表指出不允许下载的文件扩展名 -I, --include-directories=LIST 使用逗号间隔的列表指出允许下载的目录名 -X, --exclude-directories=LIST 使用逗号间隔的列表指出不允许下载的目录名 例如： 下载单个文件 $ wget http://ftp.example.com/pub/getme 下载单个文件（断点续传）、在后台运行（-b） $ wget -cb http://ftp.example.com/isos/somefile.iso 下载单一HTML文件（-p确保页面显示的所有元素均被下载，-k重新建立链接） $ wget -p -k http://esl.jamond.net/index.html 下载 http://example.com 网站上 packages 目录中的所有文件。(-np 不遍历父目录，-nd 不在本机重新创建目录结构） $ wget -r -np -nd http://example.com/packages/ rsync：文件同步可通过LAN/WAN同步不同主机上的文件或目录，也可以同步本地硬盘中的不同文件或目录； rsync 使用所谓的 rsync算法 进行数据同步，同步若干新文件时：只复制有变化的文件，同步原有文件时：只复制文件的变化部分； 两种使用方式： 远程Shell方式 可以使用rsh、ssh等远程Shell，默认使用ssh 用户验证由远程Shell负责 C/S方式 客户连接远程 rsync 服务器 rsync 服务器默认监听 873 端口 用户验证由 rsync 服务器负责(rsync 服务器也可配置为匿名访问) 访问rsync服务器时可使用URL（rsync://host） rsync 命令 同步本地文件或目录 rsync [OPTION...] SRC... [DEST] 将远程文件或目录同步到本地（拉） rsync [OPTION...] [USER@]HOST:SRC... [DEST] 将本地文件或目录同步到远程（推） rsync [OPTION...] SRC... [USER@]HOST:DEST 常用选项 选项 说明 -a，--archive 归档模式，等价于 -rlptgoD（不包括-H） -r，--recursive 对子目录以递归模式处理 -l，--links 保持符号链接文件 -H，--hard-links 保持硬链接文件 -p，--perms 保持文件权限 -t，--times 保持文件时间信息 -g，--group 保持文件属组信息 -o，--owner 保持文件属主信息（仅 root 可用） -D 保持设备文件和特殊文件（仅 root 可用） 举例： 将整个 /home 目录及其子目录同步到 /backups # rsync -a --delete /home /backups 将 /home 目录下的所有内容同步到 /backups/home.0 # rsync -a --delete /home/ /backups/home.0 执行“推”复制同步 # rsync /etc/hosts centos5:/etc/hosts 执行“拉”复制同步 # rsync soho:/etc/hosts /etc/hosts links/w3m：字符界面浏览器浏览指定的URL $ links http://www.example.com $ w3m http://www.example.com SSH与OpenSSHSSHSSH简介 SSH 的英文全称为 Secure SHell SSH 是建立在应用层和传输层基础上的安全协议 SSH 目的是要在非安全网络上提供安全的远程登录和其他安全服务 所有使用 SSH 协议的通信，包括口令，都会被加密传输 用于替代传统的 telnet、ftp、r族命令（rlogin、rsh、rcp） SSH（Secure SHell）协议是 C/S 模式协议 分为 SSH 的客户端和服务器端 一次成功的 SSH 会话需要两端通力合作来完成 SSH协议体系结构(见图) SSH基于主机的安全验证 在 SSH 协议中每台主机都有一对或多对主机密钥 首次启动 SSH 服务时会自动生成，一般无需变更 SSH 通过严格的主机密钥检查 用户可以核对来自服务器的公钥同之前所定义的密钥是否一致，防止了某个用户访问一个他没有相应公钥的主机 SSH 利用主机的公钥（而不是IP地址）实现主机身份认证，不容易受到IP地址欺骗的攻击 SSH基于用户的安全验证 基于口令的安全验证 只要用户知道自己用户账号和口令，就可以登录到远程主机 口令验证由 PAM 进行验证 SSH 对所有传输的数据进行加密传输（包括用户口令） 不能避免受到“中间人”方式的攻击(冒充真正的服务器) 基于密钥的安全验证 每个用户都拥有自己的一对或多对密钥 包括：公钥和私钥 密钥协议： RSA 或 DSS/DSA 每个用户自己的密钥对需用户自己生成 可以使用不同的密钥协议创建多对密钥 并将公密发布到需要访问的服务器上 基于密钥的安全验证不需要在网络上传送用户口令 可以避免“中间人”的攻击方式，因为“中间人”没有你的私钥 用户密钥认证协议 RSA 和 DSS/DSA 认证承诺不必提供密码就能够同远程系统建立连接 RSA/DSA 密钥认证协议的基本工作原理： 密钥由一对组成：一把专用密钥（亦称私钥）和一把公用密钥（亦称公钥）。 密钥对由客户端生成，私钥由用户自己保管，并将公钥散播到需要认证之处（登录服务器端）。 公钥用于对消息进行加密，只有拥有私钥的人才能对该消息进行解密。 公钥只能用于加密，而私钥只能用于对由匹配的公钥编码的消息进行解密。 用户密钥认证过程 SSH 客户向 SSH 服务器提出用户密钥认证请求 SSH 服务器在用户的工作目录下寻找其公钥，然后把它和用户发送过来的公钥进行比较 如果两个密钥一致 服务器就用公钥生成加密“质询”（challenge）并把它发送给客户端软件 客户端软件收到“质询”之后就使用用户自己的私钥解密再把它送还给服务器 认证通过后，客户端向服务器发送会话请求开始双方的加密会话 否则认证失败 OpenSSHOpenSSH简介 OpenSSH 是 SSH 协议的免费开源实现 安全、加密的网络连接工具（ssh、scp、sftp） 代替了 telnet、 rlogin、rsh、rcp 和 ftp 等工具 OpenSSH 支持 SSH 协议的版本 1和 2。 自从 OpenSSH 的版本 2.9 以来，默认的协议是版本 2 版本 2的协议支持 RSA 和 DSA，默认使用 RSA 密钥 OpenSSH 支持的用户认证方式 支持基于 PAM 的用户口令认证 支持用户密钥认证 SSH ssh 用于替代 telnet/rlogin 格式 ssh [user@]hostname ssh [user@]hostname command 举例 $ ssh -l osmond 192.168.0.100 $ ssh osmond@192.168.0.100 $ ssh osmond@192.168.0.100 &quot;ls ~&quot; SCP scp 用于替代 rcp 格式：scp [option] &lt;source&gt; &lt;destination&gt; 远程文件的指定方式是： [user@]host:/path/to/file 选项： -r：用于递归复制子目录 -p：用于保留被复制文件的时间戳和权限 -C：用于压缩数据流 举例 $ scp osmond@192.168.0.101:remotefile localfile $ scp -rpC osmond@backup.ls-al.me:/data . Sftp sftp命令是基于SSH协议的 ftp 的客户端 与 ftp 类似, 但它进行加密传输，比FTP有更高的安全性 格式 sftp [user@]hostname 举例： $ sftp osmond@192.168.0.101 进入 sftp 会话之后就可以使用 ftp 子命令上传和下载文件了 OpenSSH的主机密钥生成 OpenSSH的服务启动脚本包含了主机密钥的生成命令,首次启动时默认会生成多对主机密钥（SSH-1 RSA、SSH-2 RSA、SSH-2 DSA） 若系统是从一个旧系统克隆而来,需要重新生成主机密钥 在 RHEL/CentOS 上重新生成主机密钥 # rm -f /etc/ssh/ssh_host_* # service sshd restart OpenSSH密钥生成和分发 密钥生成 ssh-keygen [-t rsa1|rsa|dsa] 默认使用rsa密钥认证类型 密钥分发 私钥（private key）被保留在自己的系统上 通常使用口令保护（建议） 重新设置私钥保护短语 $ ssh-keygen -f ~/.ssh/id_dsa -p 公钥（public key）被分发（复制）到目标系统 $ ssh-copy-id -i ~/.ssh/id_dsa.pub [user@]host ssh-agent和ssh-add ssh-agent 是一个用户认证代理（authentication agent） 用于在登录会话中缓存解密后的私钥 ssh/scp/sftp命令内置支持了同 ssh-agent 通信的机制 使得私钥保护口令只需要输入一次 在Shell中运行 $ eval $(ssh-agent) 或 $ ssh-agent bash 缺点 每次登录会话都启动一个新的 ssh-agent 副本 浪费资源 得使用 ssh-add 向每个新的 ssh-agent 副本添加私钥 ssh-agent与cron任务系统不兼容 cron 任务无法从它们的环境中继承 ssh-agent 所需的 SSH_AUTH_SOCK 变量 ssh-add 用于向认证代理的高速缓存中添加私钥 keychain简介 keychain 是一个 ssh-agent 的前端工具 使用keychain完美实现无口令登录 让每个用户只使用一个 ssh-agent 进程 使用一个认证代理可以跨越不同的登录会话 只需对每个私钥执行一次 ssh-add 即可 与 cron任务系统兼容 安装 # yum --enablerepo=rpmforge install keychain # man keychain]]></content>
    </entry>

    
  
  
</search>
